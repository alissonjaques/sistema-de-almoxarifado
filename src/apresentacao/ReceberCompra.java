/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package apresentacao;

import modelo.Almoxarifado;
import modelo.Corredor;
import controle.Empilhadeira;
import modelo.OrdemDeCompra;
import modelo.Peca;
import modelo.Recepcao;
import static enums.StatusDaEntrega.NAOENTREGUE;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alisson Jaques
 */
public class ReceberCompra extends javax.swing.JInternalFrame {

    private List<OrdemDeCompra> listaOrdensDeCompra;
    private Almoxarifado estoque;
    private ArrayList<Corredor> listaDeCorredores;
    private Recepcao recepcao;
    private Empilhadeira empilhadeira;
    private ArrayList<Integer> quantidadePorPeca;
    private int vetorQuantidadePorPeca[];
    static private int quantidadeDePecas;
    static private int contador = 0;
   

    /**
     * Creates new form ReceberCompra
     *
     * @param listaDeOrdensDeCompra
     * @param estoque
     * @param listaDeCorredores
     * @param recepcao
     */
    public ReceberCompra(List<OrdemDeCompra> listaDeOrdensDeCompra, Almoxarifado estoque, ArrayList<Corredor> listaDeCorredores, Recepcao recepcao, Empilhadeira empilhadeira) {
        this.listaOrdensDeCompra = listaDeOrdensDeCompra;
        this.empilhadeira = empilhadeira;
        this.estoque = estoque;
        this.listaDeCorredores = listaDeCorredores;
        this.recepcao = recepcao;
        quantidadePorPeca = new ArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jpDigiteRP = new javax.swing.JPanel();
        jtfDigiteRP = new javax.swing.JTextField();
        jlDigiteRP = new javax.swing.JLabel();
        jbOkRP = new javax.swing.JButton();
        jpListaOrdensRP = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtOrdensRP = new javax.swing.JTable();
        jpListaProdutosRP = new javax.swing.JPanel();
        jlDescricaoRP = new javax.swing.JLabel();
        jlCodBarrasRP = new javax.swing.JLabel();
        jlQuantidadeSolicRP = new javax.swing.JLabel();
        jlQuantidadeRecRP = new javax.swing.JLabel();
        jbReceberProdRP = new javax.swing.JButton();
        jbEmitirRelatorioRP = new javax.swing.JButton();
        jtfCodBarrasRP = new javax.swing.JTextField();
        jtfDescricaoRP = new javax.swing.JTextField();
        jbSairRP = new javax.swing.JButton();
        jtQuantidadeSolicRP = new javax.swing.JTextField();
        jtfQuantidadeRecRP = new javax.swing.JTextField();

        jCheckBox1.setText("jCheckBox1");

        setIconifiable(true);
        setTitle("RECEBER PEDIDO DE COMPRA");
        setPreferredSize(new java.awt.Dimension(613, 433));

        jlDigiteRP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlDigiteRP.setText("Digite o código da ordem que deseja receber:");

        jbOkRP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbOkRP.setText("Ok");
        jbOkRP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkRPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpDigiteRPLayout = new javax.swing.GroupLayout(jpDigiteRP);
        jpDigiteRP.setLayout(jpDigiteRPLayout);
        jpDigiteRPLayout.setHorizontalGroup(
            jpDigiteRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDigiteRPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlDigiteRP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jtfDigiteRP, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbOkRP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpDigiteRPLayout.setVerticalGroup(
            jpDigiteRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDigiteRPLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jpDigiteRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDigiteRP)
                    .addComponent(jtfDigiteRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbOkRP))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpListaOrdensRP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "LISTA DE ORDENS DE COMPRA", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jtOrdensRP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código da Ordem", "Fornecedor", "Status da Ordem"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtOrdensRP.setEnabled(false);
        jScrollPane1.setViewportView(jtOrdensRP);
        if (jtOrdensRP.getColumnModel().getColumnCount() > 0) {
            jtOrdensRP.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        javax.swing.GroupLayout jpListaOrdensRPLayout = new javax.swing.GroupLayout(jpListaOrdensRP);
        jpListaOrdensRP.setLayout(jpListaOrdensRPLayout);
        jpListaOrdensRPLayout.setHorizontalGroup(
            jpListaOrdensRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpListaOrdensRPLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jpListaOrdensRPLayout.setVerticalGroup(
            jpListaOrdensRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpListaOrdensRPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpListaProdutosRP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "LISTA DE PRODUTOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jlDescricaoRP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlDescricaoRP.setText("Descrição:");

        jlCodBarrasRP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlCodBarrasRP.setText("Codigo de Barras:");

        jlQuantidadeSolicRP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlQuantidadeSolicRP.setText("Quantidade Solicitada:");

        jlQuantidadeRecRP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlQuantidadeRecRP.setText("Quantidade Recebida:");

        jbReceberProdRP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbReceberProdRP.setText("Receber Produto");
        jbReceberProdRP.setEnabled(false);
        jbReceberProdRP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReceberProdRPActionPerformed(evt);
            }
        });

        jbEmitirRelatorioRP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbEmitirRelatorioRP.setText("Emitir Relatório");
        jbEmitirRelatorioRP.setEnabled(false);
        jbEmitirRelatorioRP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEmitirRelatorioRPActionPerformed(evt);
            }
        });

        jtfCodBarrasRP.setEnabled(false);

        jtfDescricaoRP.setEnabled(false);

        jbSairRP.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbSairRP.setText("SAIR");
        jbSairRP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSairRPActionPerformed(evt);
            }
        });

        jtQuantidadeSolicRP.setEnabled(false);

        jtfQuantidadeRecRP.setEnabled(false);
        jtfQuantidadeRecRP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfQuantidadeRecRPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpListaProdutosRPLayout = new javax.swing.GroupLayout(jpListaProdutosRP);
        jpListaProdutosRP.setLayout(jpListaProdutosRPLayout);
        jpListaProdutosRPLayout.setHorizontalGroup(
            jpListaProdutosRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpListaProdutosRPLayout.createSequentialGroup()
                .addGroup(jpListaProdutosRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpListaProdutosRPLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpListaProdutosRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlCodBarrasRP)
                            .addComponent(jlDescricaoRP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jpListaProdutosRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfDescricaoRP, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(jtfCodBarrasRP))
                        .addGap(18, 18, 18)
                        .addGroup(jpListaProdutosRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpListaProdutosRPLayout.createSequentialGroup()
                                .addComponent(jlQuantidadeRecRP)
                                .addGap(18, 18, 18))
                            .addGroup(jpListaProdutosRPLayout.createSequentialGroup()
                                .addComponent(jlQuantidadeSolicRP)
                                .addGap(14, 14, 14)))
                        .addGroup(jpListaProdutosRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jtQuantidadeSolicRP, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(jtfQuantidadeRecRP)))
                    .addGroup(jpListaProdutosRPLayout.createSequentialGroup()
                        .addComponent(jbReceberProdRP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbEmitirRelatorioRP)
                        .addGap(18, 18, 18)
                        .addComponent(jbSairRP)))
                .addContainerGap())
        );
        jpListaProdutosRPLayout.setVerticalGroup(
            jpListaProdutosRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpListaProdutosRPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpListaProdutosRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDescricaoRP)
                    .addComponent(jtfDescricaoRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtQuantidadeSolicRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlQuantidadeSolicRP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpListaProdutosRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCodBarrasRP)
                    .addComponent(jtfCodBarrasRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlQuantidadeRecRP)
                    .addComponent(jtfQuantidadeRecRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75)
                .addGroup(jpListaProdutosRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbEmitirRelatorioRP)
                    .addComponent(jbSairRP)
                    .addComponent(jbReceberProdRP))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpDigiteRP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpListaOrdensRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jpListaProdutosRP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpListaOrdensRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpDigiteRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpListaProdutosRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbOkRPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkRPActionPerformed
        if (getJtfDigiteRP().getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Favor preencher um código válido para a ordem de compra.", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
        } else {
            String codigoOrdem = getJtfDigiteRP().getText();
            boolean botao = false;
            OrdemDeCompra umaOrdem = new OrdemDeCompra();
            System.out.println(getListaOrdensDeCompra());
            for (OrdemDeCompra ordem : getListaOrdensDeCompra()) {
                if (ordem.getCodigoDaOrdem().equals(codigoOrdem)) {
                    umaOrdem = ordem;
                    botao = true;
                }
            }

            if (umaOrdem.getStatus() != NAOENTREGUE) {
                JOptionPane.showMessageDialog(this, "Ordem de Compra já recebida.", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                getJbOkRP().setEnabled(false);
                getJbReceberProdRP().setEnabled(false);
                getJtfQuantidadeRecRP().setEnabled(false);
                getJbEmitirRelatorioRP().setEnabled(false);
                limparTabelaOrdem();
                DefaultTableModel model = (DefaultTableModel) getJtOrdensRP().getModel();
                model.addRow(new Object[]{umaOrdem.getCodigoDaOrdem(), umaOrdem.getFornecedor().getRazaoSocial(), umaOrdem.getStatus().getDescricao()});
                getJtfDescricaoRP().setText("");
                getJtfCodBarrasRP().setText("");
                getJtQuantidadeSolicRP().setText("");
            } else {
                getJbOkRP().setEnabled(false);
                getJbReceberProdRP().setEnabled(true);

                if (botao) {
                    getJtfQuantidadeRecRP().setEnabled(true);
                    DefaultTableModel model = (DefaultTableModel) getJtOrdensRP().getModel();
                    model.addRow(new Object[]{umaOrdem.getCodigoDaOrdem(), umaOrdem.getFornecedor().getRazaoSocial(), umaOrdem.getStatus().getDescricao()});
                    setQuantidadeDePecas(umaOrdem.getPecasOrdemDeCompra().size());
                    getJtfDescricaoRP().setText(umaOrdem.getPecasOrdemDeCompra().get(0).getDescricao());
                    getJtfCodBarrasRP().setText(umaOrdem.getPecasOrdemDeCompra().get(0).getCodigoDeBarrasUpc());
                    int vetor[] = umaOrdem.getQuantidadePorPeca();
                    getJtQuantidadeSolicRP().setText(vetor[0] + "");
                    contador++;
                } else {
                    getJbOkRP().setEnabled(true);
                    getJbReceberProdRP().setEnabled(false);
                    JOptionPane.showMessageDialog(this, "Favor preencher um código válido para a ordem de compra.", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
                }
            }

        }


    }//GEN-LAST:event_jbOkRPActionPerformed

    private void jbEmitirRelatorioRPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEmitirRelatorioRPActionPerformed
        String codigoOrdem = getJtfDigiteRP().getText();
        OrdemDeCompra umaOrdem = new OrdemDeCompra();
        System.out.println(getListaOrdensDeCompra());
        for (OrdemDeCompra ordem : getListaOrdensDeCompra()) {
            if (ordem.getCodigoDaOrdem().equals(codigoOrdem)) {
                umaOrdem = ordem;
            }
        }

        if (umaOrdem.getStatus() == NAOENTREGUE) {
            int i = 0;
            vetorQuantidadePorPeca = new int[getQuantidadePorPeca().size()];
            for (Integer vetor : getQuantidadePorPeca()) {
                vetorQuantidadePorPeca[i] = vetor;
                i++;
            }
            System.out.println("Vetor Integer: ");
            System.out.println(getQuantidadePorPeca());
            System.out.println("Vetor de quantidade:");
            for (int m = 0; m < vetorQuantidadePorPeca.length; m++) {
                System.out.println(vetorQuantidadePorPeca[m]);
            }
            ArrayList<Peca> estrado = recepcao.registrarEntrega(umaOrdem, vetorQuantidadePorPeca);

            getEmpilhadeira().setEstoque(estoque);
            getEmpilhadeira().setEstrado(estrado);
            getEmpilhadeira().guardar();
            limparTabelaOrdem();
            DefaultTableModel model = (DefaultTableModel) getJtOrdensRP().getModel();
            model.addRow(new Object[]{umaOrdem.getCodigoDaOrdem(), umaOrdem.getFornecedor().getRazaoSocial(), umaOrdem.getStatus().getDescricao()});
            System.out.println(estoque);
            System.out.println(estrado);
            System.out.println(getEmpilhadeira().getListaDeDistribuicao());
            ArrayList<String> corredor = getEmpilhadeira().getCorredor();
            ArrayList<String> receptaculo = getEmpilhadeira().getReceptaculo();
            ArrayList<String> codigoProduto = getEmpilhadeira().getCodigoProduto();
            ArrayList<String> codigoUPC = getEmpilhadeira().getCodigoUPC();
            TelaRelatorio relatorio = new TelaRelatorio(corredor,receptaculo,codigoProduto,codigoUPC);
            relatorio.preencherRelatorio();
            relatorio.setVisible(true);
            contador = 0;

        } else {
            System.out.println(getEmpilhadeira().getListaDeDistribuicao());
            ArrayList<String> corredor = getEmpilhadeira().getCorredor();
            ArrayList<String> receptaculo = getEmpilhadeira().getReceptaculo();
            ArrayList<String> codigoProduto = getEmpilhadeira().getCodigoProduto();
            ArrayList<String> codigoUPC = getEmpilhadeira().getCodigoUPC();
            TelaRelatorio relatorio = new TelaRelatorio(corredor,receptaculo,codigoProduto,codigoUPC);
            relatorio.preencherRelatorio();
            relatorio.setVisible(true);
        }
    }//GEN-LAST:event_jbEmitirRelatorioRPActionPerformed

    private void jbSairRPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSairRPActionPerformed
        int op = JOptionPane.showConfirmDialog(this, "Deseja mesmo sair do pedido de ordem de compra?", "Sair", JOptionPane.OK_CANCEL_OPTION);
        
        if (op == 0) {
            getEmpilhadeira().setCorredor(new ArrayList<>());
            getEmpilhadeira().setReceptaculo(new ArrayList<>());
            getEmpilhadeira().setCodigoProduto(new ArrayList<>());
            getEmpilhadeira().setCodigoUPC(new ArrayList<>());
            dispose();
        }
    }//GEN-LAST:event_jbSairRPActionPerformed

    private void jbReceberProdRPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReceberProdRPActionPerformed
        if (getJtfQuantidadeRecRP().getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Favor preencher a quantidade de unidades entregues do produto.", "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
        } else {
            if (contador == 0) {
                int quantidade;

                try {
                    quantidade = Integer.parseInt(getJtfQuantidadeRecRP().getText());
                } catch (NumberFormatException ex) {
                    quantidade = 1;
                }

                getQuantidadePorPeca().add(quantidade);
                getJtfQuantidadeRecRP().setText("");

                contador++;
            } else {
                if (contador < getQuantidadeDePecas()) {

                    int quantidade;

                    try {
                        quantidade = Integer.parseInt(getJtfQuantidadeRecRP().getText());
                    } catch (NumberFormatException ex) {
                        quantidade = 1;
                    }

                    String codigoOrdem = getJtfDigiteRP().getText();
                    OrdemDeCompra umaOrdem = new OrdemDeCompra();
                    for (OrdemDeCompra ordem : getListaOrdensDeCompra()) {
                        if (ordem.getCodigoDaOrdem().equals(codigoOrdem)) {
                            umaOrdem = ordem;
                        }
                    }

                    getJtfDescricaoRP().setText(umaOrdem.getPecasOrdemDeCompra().get(getContador()).getDescricao());
                    getJtfCodBarrasRP().setText(umaOrdem.getPecasOrdemDeCompra().get(getContador()).getCodigoDeBarrasUpc());
                    int vetor[] = umaOrdem.getQuantidadePorPeca();
                    getJtQuantidadeSolicRP().setText(vetor[getContador()] + "");

                    getQuantidadePorPeca().add(quantidade);
                    getJtfQuantidadeRecRP().setText("");

                    contador++;
                } else {
                    int quantidade;

                    try {
                        quantidade = Integer.parseInt(getJtfQuantidadeRecRP().getText());
                    } catch (NumberFormatException ex) {
                        quantidade = 1;
                    }
                    getQuantidadePorPeca().add(quantidade);
                    getJbReceberProdRP().setEnabled(false);
                    getJbEmitirRelatorioRP().setEnabled(true);
                    getJtfQuantidadeRecRP().setEnabled(false);
                }
            }

        }
    }//GEN-LAST:event_jbReceberProdRPActionPerformed

    private void jtfQuantidadeRecRPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfQuantidadeRecRPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfQuantidadeRecRPActionPerformed

    private void limparTabelaOrdem() {
        DefaultTableModel model = (DefaultTableModel) getJtOrdensRP().getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbEmitirRelatorioRP;
    private javax.swing.JButton jbOkRP;
    private javax.swing.JButton jbReceberProdRP;
    private javax.swing.JButton jbSairRP;
    private javax.swing.JLabel jlCodBarrasRP;
    private javax.swing.JLabel jlDescricaoRP;
    private javax.swing.JLabel jlDigiteRP;
    private javax.swing.JLabel jlQuantidadeRecRP;
    private javax.swing.JLabel jlQuantidadeSolicRP;
    private javax.swing.JPanel jpDigiteRP;
    private javax.swing.JPanel jpListaOrdensRP;
    private javax.swing.JPanel jpListaProdutosRP;
    private javax.swing.JTable jtOrdensRP;
    private javax.swing.JTextField jtQuantidadeSolicRP;
    private javax.swing.JTextField jtfCodBarrasRP;
    private javax.swing.JTextField jtfDescricaoRP;
    private javax.swing.JTextField jtfDigiteRP;
    private javax.swing.JTextField jtfQuantidadeRecRP;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the empilhadeira
     */
    public Empilhadeira getEmpilhadeira() {
        return empilhadeira;
    }

    /**
     * @param empilhadeira the empilhadeira to set
     */
    public void setEmpilhadeira(Empilhadeira empilhadeira) {
        this.empilhadeira = empilhadeira;
    }

    /**
     * @return the listaOrdensDeCompra
     */
    public List<OrdemDeCompra> getListaOrdensDeCompra() {
        return listaOrdensDeCompra;
    }

    /**
     * @param listaOrdensDeCompra the listaOrdensDeCompra to set
     */
    public void setListaOrdensDeCompra(List<OrdemDeCompra> listaOrdensDeCompra) {
        this.listaOrdensDeCompra = listaOrdensDeCompra;
    }

    /**
     * @return the estoque
     */
    public Almoxarifado getEstoque() {
        return estoque;
    }

    /**
     * @param estoque the estoque to set
     */
    public void setEstoque(Almoxarifado estoque) {
        this.estoque = estoque;
    }

    /**
     * @return the listaDeCorredores
     */
    public ArrayList<Corredor> getListaDeCorredores() {
        return listaDeCorredores;
    }

    /**
     * @param listaDeCorredores the listaDeCorredores to set
     */
    public void setListaDeCorredores(ArrayList<Corredor> listaDeCorredores) {
        this.listaDeCorredores = listaDeCorredores;
    }

    /**
     * @return the recepcao
     */
    public Recepcao getRecepcao() {
        return recepcao;
    }

    /**
     * @param recepcao the recepcao to set
     */
    public void setRecepcao(Recepcao recepcao) {
        this.recepcao = recepcao;
    }

    /**
     * @return the jScrollPane1
     */
    public javax.swing.JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    /**
     * @param jScrollPane1 the jScrollPane1 to set
     */
    public void setjScrollPane1(javax.swing.JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    /**
     * @return the jbEmitirRelatorioRP
     */
    public javax.swing.JButton getJbEmitirRelatorioRP() {
        return jbEmitirRelatorioRP;
    }

    /**
     * @param jbEmitirRelatorioRP the jbEmitirRelatorioRP to set
     */
    public void setJbEmitirRelatorioRP(javax.swing.JButton jbEmitirRelatorioRP) {
        this.jbEmitirRelatorioRP = jbEmitirRelatorioRP;
    }

    /**
     * @return the jbOkRP
     */
    public javax.swing.JButton getJbOkRP() {
        return jbOkRP;
    }

    /**
     * @param jbOkRP the jbOkRP to set
     */
    public void setJbOkRP(javax.swing.JButton jbOkRP) {
        this.jbOkRP = jbOkRP;
    }

    /**
     * @return the jbReceberProdRP
     */
    public javax.swing.JButton getJbReceberProdRP() {
        return jbReceberProdRP;
    }

    /**
     * @param jbReceberProdRP the jbReceberProdRP to set
     */
    public void setJbReceberProdRP(javax.swing.JButton jbReceberProdRP) {
        this.jbReceberProdRP = jbReceberProdRP;
    }

    /**
     * @return the jbSairRP
     */
    public javax.swing.JButton getJbSairRP() {
        return jbSairRP;
    }

    /**
     * @param jbSairRP the jbSairRP to set
     */
    public void setJbSairRP(javax.swing.JButton jbSairRP) {
        this.jbSairRP = jbSairRP;
    }

    /**
     * @return the jlCodBarrasRP
     */
    public javax.swing.JLabel getJlCodBarrasRP() {
        return jlCodBarrasRP;
    }

    /**
     * @param jlCodBarrasRP the jlCodBarrasRP to set
     */
    public void setJlCodBarrasRP(javax.swing.JLabel jlCodBarrasRP) {
        this.jlCodBarrasRP = jlCodBarrasRP;
    }

    /**
     * @return the jlDescricaoRP
     */
    public javax.swing.JLabel getJlDescricaoRP() {
        return jlDescricaoRP;
    }

    /**
     * @param jlDescricaoRP the jlDescricaoRP to set
     */
    public void setJlDescricaoRP(javax.swing.JLabel jlDescricaoRP) {
        this.jlDescricaoRP = jlDescricaoRP;
    }

    /**
     * @return the jlDigiteRP
     */
    public javax.swing.JLabel getJlDigiteRP() {
        return jlDigiteRP;
    }

    /**
     * @param jlDigiteRP the jlDigiteRP to set
     */
    public void setJlDigiteRP(javax.swing.JLabel jlDigiteRP) {
        this.jlDigiteRP = jlDigiteRP;
    }

    /**
     * @return the jlQuantidadeRecRP
     */
    public javax.swing.JLabel getJlQuantidadeRecRP() {
        return jlQuantidadeRecRP;
    }

    /**
     * @param jlQuantidadeRecRP the jlQuantidadeRecRP to set
     */
    public void setJlQuantidadeRecRP(javax.swing.JLabel jlQuantidadeRecRP) {
        this.jlQuantidadeRecRP = jlQuantidadeRecRP;
    }

    /**
     * @return the jlQuantidadeSolicRP
     */
    public javax.swing.JLabel getJlQuantidadeSolicRP() {
        return jlQuantidadeSolicRP;
    }

    /**
     * @param jlQuantidadeSolicRP the jlQuantidadeSolicRP to set
     */
    public void setJlQuantidadeSolicRP(javax.swing.JLabel jlQuantidadeSolicRP) {
        this.jlQuantidadeSolicRP = jlQuantidadeSolicRP;
    }

    /**
     * @return the jpDigiteRP
     */
    public javax.swing.JPanel getJpDigiteRP() {
        return jpDigiteRP;
    }

    /**
     * @param jpDigiteRP the jpDigiteRP to set
     */
    public void setJpDigiteRP(javax.swing.JPanel jpDigiteRP) {
        this.jpDigiteRP = jpDigiteRP;
    }

    /**
     * @return the jpListaOrdensRP
     */
    public javax.swing.JPanel getJpListaOrdensRP() {
        return jpListaOrdensRP;
    }

    /**
     * @param jpListaOrdensRP the jpListaOrdensRP to set
     */
    public void setJpListaOrdensRP(javax.swing.JPanel jpListaOrdensRP) {
        this.jpListaOrdensRP = jpListaOrdensRP;
    }

    /**
     * @return the jpListaProdutosRP
     */
    public javax.swing.JPanel getJpListaProdutosRP() {
        return jpListaProdutosRP;
    }

    /**
     * @param jpListaProdutosRP the jpListaProdutosRP to set
     */
    public void setJpListaProdutosRP(javax.swing.JPanel jpListaProdutosRP) {
        this.jpListaProdutosRP = jpListaProdutosRP;
    }

    /**
     * @return the jtOrdensRP
     */
    public javax.swing.JTable getJtOrdensRP() {
        return jtOrdensRP;
    }

    /**
     * @param jtOrdensRP the jtOrdensRP to set
     */
    public void setJtOrdensRP(javax.swing.JTable jtOrdensRP) {
        this.jtOrdensRP = jtOrdensRP;
    }

    /**
     * @return the jtQuantidadeSolicRP
     */
    public javax.swing.JTextField getJtQuantidadeSolicRP() {
        return jtQuantidadeSolicRP;
    }

    /**
     * @param jtQuantidadeSolicRP the jtQuantidadeSolicRP to set
     */
    public void setJtQuantidadeSolicRP(javax.swing.JTextField jtQuantidadeSolicRP) {
        this.jtQuantidadeSolicRP = jtQuantidadeSolicRP;
    }

    /**
     * @return the jtfCodBarrasRP
     */
    public javax.swing.JTextField getJtfCodBarrasRP() {
        return jtfCodBarrasRP;
    }

    /**
     * @param jtfCodBarrasRP the jtfCodBarrasRP to set
     */
    public void setJtfCodBarrasRP(javax.swing.JTextField jtfCodBarrasRP) {
        this.jtfCodBarrasRP = jtfCodBarrasRP;
    }

    /**
     * @return the jtfDescricaoRP
     */
    public javax.swing.JTextField getJtfDescricaoRP() {
        return jtfDescricaoRP;
    }

    /**
     * @param jtfDescricaoRP the jtfDescricaoRP to set
     */
    public void setJtfDescricaoRP(javax.swing.JTextField jtfDescricaoRP) {
        this.jtfDescricaoRP = jtfDescricaoRP;
    }

    /**
     * @return the jtfDigiteRP
     */
    public javax.swing.JTextField getJtfDigiteRP() {
        return jtfDigiteRP;
    }

    /**
     * @param jtfDigiteRP the jtfDigiteRP to set
     */
    public void setJtfDigiteRP(javax.swing.JTextField jtfDigiteRP) {
        this.jtfDigiteRP = jtfDigiteRP;
    }

    /**
     * @return the jtfQuantidadeRecRP
     */
    public javax.swing.JTextField getJtfQuantidadeRecRP() {
        return jtfQuantidadeRecRP;
    }

    /**
     * @param jtfQuantidadeRecRP the jtfQuantidadeRecRP to set
     */
    public void setJtfQuantidadeRecRP(javax.swing.JTextField jtfQuantidadeRecRP) {
        this.jtfQuantidadeRecRP = jtfQuantidadeRecRP;
    }

    /**
     * @return the quantidadePorPeca
     */
    public ArrayList<Integer> getQuantidadePorPeca() {
        return quantidadePorPeca;
    }

    /**
     * @param quantidadePorPeca the quantidadePorPeca to set
     */
    public void setQuantidadePorPeca(ArrayList<Integer> quantidadePorPeca) {
        this.quantidadePorPeca = quantidadePorPeca;
    }

    /**
     * @return the contator
     */
    public static int getContador() {
        return contador;
    }

    /**
     * @param aContator the contator to set
     */
    public static void setContador(int aContator) {
        contador = aContator;
    }

    /**
     * @return the quantidadeDePecas
     */
    public static int getQuantidadeDePecas() {
        return quantidadeDePecas;
    }

    /**
     * @param aQuantidadeDePecas the quantidadeDePecas to set
     */
    public static void setQuantidadeDePecas(int aQuantidadeDePecas) {
        quantidadeDePecas = aQuantidadeDePecas;
    }

    /**
     * @return the vetorQuantidePorPeca
     */
    public int[] getVetorQuantidadePorPeca() {
        return vetorQuantidadePorPeca;
    }

    /**
     * @param vetorQuantidePorPeca the vetorQuantidePorPeca to set
     */
    public void setVetorQuantidadePorPeca(int[] vetorQuantidePorPeca) {
        this.vetorQuantidadePorPeca = vetorQuantidePorPeca;
    }
}
